回顾:
  webpack 高级用法:
    优化 体积 速度

  今天:
    1: vue结合webpack 搭建一个完整的项目
    2: 封装一些常用的组件
       侧边栏 二级路由
       树组件
       拖拽组件
    3: 项目:(考试平台)
       配合  独立开发  学会百度


    目录分配
    常见的封装
    后台 : 后台的框架
    vuex:
    axios:二次封装

  1: git 回到某个版本
     git reset --hard ^HEAD
  2: webpack 优化点
     前缀 autoprefixer 代码优雅
     压缩 插件
     new TerserJSPlugin({}), new OptimizeCssAssetsPlugin({})
       production
     自带优化
     动态链接库  第三方 单独打包 cdn 上
     抽离公共代码
  3: 如何处理history刷新404的问题
     解决问题
     historyapifallback:

  4: webpack 处理js文件都需要哪些插件
     babel-loader
     @babel/core @babel/preset-env
     plugins: es7语法


如何处理history刷新404的问题
  webpack devServer 中加 historyApiFallback: true

图片的问题
什么也没配置
  img src   显示的效果 : src="[object Module]"

  解决办法:
    {
          test: /\.(png|jpg|gif)$/,
          use: [{
            loader: 'file-loader',
            options: {
              esModule: false
            }

          }]
        },

资源问题 404问题
  login/子路由 二级路由

  http://localhost:8080/main/home/bundle.ca3d99bc68.js
  http://localhost:8080/bundle.ca3d99bc68.js

  //二级路由资源文件请求404
   output: {
      filename: 'bundle.[hash:10].js',//打包的文件叫什么名字
      path: path.join(__dirname, '../dist'),
      publicPath: "/"//访问资源文件的时候 从根路径访问
    },


作业:
  1:搭建一个完整的脚手架
  2:导航栏自己完善
    左边 二级菜单 右边 二级路由的详情页
  3:宝宝说 : 图片 刷新解决一下
    明天晚上 全做完
    亮点:1 歌词
    下载:MP4  直接打开  百度
  配色网站 https://colorhunt.co/


回顾:
  较为完美的框架
    刷新404的问题
    静态资源
    图片
    options: {
      esModule: false
    }

  框架: pc
  第二个项目 PC端
    接口文档
    UI图
    开始--->最后  优化

  vue:最重要的东西  1:指令 2:组件  3:vuex  4:设计模式MVVM  4:spa
    vue的核心思想 : 数据驱动视图 M:数据 V View VM vue的实例  new Vue({代码})
    vuex: vue的仓库管理  A-->vuex -->B 没有行不行
      不要为了vuex而vuex 打包体积 代码分割 执行速度
      数据比较多 : vuex
      什么情况不需要 vuex : 数据没有太大关联

    spa:不是 模式
      h5新增的api history
      # hash

    指令: v-for  v-if  v-html  v-xxx 爽
    vue的核心

    最重要: 只有一个

    vue组件
      1.使用 所有的code都放在一个文件中 爆炸
        vue 4000行 恶心
        上传 拖拽



      2.面试
        面试官问vue的最多的是什么

        组件: 怎么封装组件
             步骤 弹框:  事件暴露  逻辑内置
             维护 上传
        生命周期 生命周期的区别
        原理

      3.职业规划
        高级工程师 源码 怎么设计的
        封装自己的组件库 npm 发个包 给别人用

  1:侧边栏组件
    1)在主页中实现
    2)组件用的时候 引过来就行了
    3)结合路由配置
    4)点击时候实现跳转



作业:
  1:宝宝说 全部完成 现场演示
  2:课堂代码
    1:侧边栏组件
    2:markdown 傻瓜式
    3:拖拽组件

  3:实现一个删除效果
    拖拽到某个点
    删除

  lrc 歌词解析  js库


2020年04月01日 星期三 天气 晴
  回顾:
    vue封装组件

    我们以前使用的UI组件 都是别人封装好的
    其实我们也可以自己封装组件
    最终生成属于自己的组件库
      侧边栏
      拖拽
      网格组件
    最终发布到 github变成开源 也可以npm发包 别人star 收获成就感
  封装组件的步骤
    小白:一头雾水
    大牛:逻辑缜密 思维清晰
        同时拥有大局观

    封装组件的目的: 于人于己都受用

    原则:
      1. 尽可能完美一些

      2. 开闭原则
        开: 开放一些接口
        闭: 别人不能修改的代码放在组件内部
        代码展示:
          开: 提供很一些组件暴露的属性和方法
            属性:通过v-slot暴露
            方法:通过回调的方式暴露
          闭: 具体的逻辑放在组件内部

      3. 代码逻辑
        需要的数据通过传参的形式传递过来  父传子
        外界想得到的结果通过回调的方式传递出去  子传父

      4. 最终: 高内聚 低耦合
    分享:第三组

  今天: 网格组件

  1:表格组件
    1:了解开闭原则
    2:闭中的功能放在组件内部
    3:数据可以通过传递的方式 传递过来
    4:样式 table 三角样式
    5:computed计算筛选
    6:vue中的filter


    <GridView
      :表头数据 ['name','price']
      :表的内容 [{name:'小红',price:100},{},{},{}]
    ></GridView>


    1:大概结构
    2:使用组件:
      1:局部注册
      2:全局注册

  封装组件的原则


  排序:
    点击某一个 点击事件(key)  key代表点击的是那一列

    // 正序 创建一个对象 {name:1,price:-1}  1:代表正序  -1代表倒序
    // 倒序

    //操作的数据 heroes
    //代码写在哪? computed
    //chai901018

2020年04月02日 星期四 天气晴

  回顾:
    组件的封装:
    表格组件:
      1:数据 --> 传值 父传子
      2:暴露 --> 回调
      3:功能点
        大众口味 : 比如搜索 比如排序

      较为完美的组件:参数特别多:可制定性特别高

    原则
      高内聚 低耦合
      内部功能 高内聚

      提供 --> 接口 以回调的方式  子传父
      获取 --> 传值 以props的方式


  今天:
    1:modal 模态组件 计算机+设计

      模态框组件  弹框组件

      通用性

    核心 思想
    问:怎么封装一个组件
    答:弹框组件(模态组件)
    问:怎么封装
    答:布局 按钮 点击 图层
    问:这个组件中包含以下几种之一
      列表
      输入框
      图片
    答:传值
      在组件里面判断 不超过4分

    正确的答案: slot

  1:布局 居中
  2:接收内容   slot 具名插槽
  3:点击确定和取消 事件
  4:动画 vue中自带的动画 transition v-enter  v-enter-active

  vue中的动画

    1) 想要动的元素 外层加 <transition name='anim'>
    2) 类











    2:项目 搭建 架构





















